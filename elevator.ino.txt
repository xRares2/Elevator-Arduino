#include <LiquidCrystal.h>
long duration;
int distance;

const int trigPin = 10;
const int echoPin = 11;

const int led1 = 2;
const int led2 = 3;
const int led3 = 4;
const int led4 = 5;

const int rs = 6, en = 7, d4 = 8, d5 = 9, d6 = 12, d7 = 13;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);
int previousLevel = -1;

void setup() {
  lcd.begin(16, 2);
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
  pinMode(led3, OUTPUT);
  pinMode(led4, OUTPUT);

  Serial.begin(9600);
}

void loop() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  duration = pulseIn(echoPin, HIGH);
  distance = duration * 0.034 / 2;

  Serial.print("Distance: ");
  Serial.println(distance);
  
  int currentLevel;

  if (distance <= 7) {
    digitalWrite(led1, LOW);
    digitalWrite(led2, LOW);
    digitalWrite(led3, LOW);
    digitalWrite(led4, HIGH);
    currentLevel = 4;
  } else if (distance <= 15) {
    digitalWrite(led1, LOW);
    digitalWrite(led2, LOW);
    digitalWrite(led3, HIGH);
    digitalWrite(led4, LOW);
    currentLevel = 3;
  } else if (distance <= 23) {
    digitalWrite(led1, LOW);
    digitalWrite(led2, HIGH);
    digitalWrite(led3, LOW);
    digitalWrite(led4, LOW);
    currentLevel = 2;
  } else if (distance <= 31) {
    digitalWrite(led1, HIGH);
    digitalWrite(led2, LOW);
    digitalWrite(led3, LOW);
    digitalWrite(led4, LOW);
    currentLevel = 1;
  } 

  if (currentLevel != previousLevel) {
    lcd.clear();
    lcd.print("Floor: ");
    if (currentLevel == 1) {
      lcd.print("P");
    } else {
      lcd.print(currentLevel - 1);
    }

    previousLevel = currentLevel;
  }

  delay(500);
}



Programul care controlează logica de mișcare și semnalizarea este:
#include <AccelStepper.h>
#include <IRremote.h>

const int button1 = 2;
const int button2 = 4;
const int button3 = 7;
const int button4 = 12;

const int rcvPin=5;
IRrecv irrecv(rcvPin);
decode_results results;

bool isMoving = false;  
const int stepsPerFloor = 3500;

AccelStepper stepper(AccelStepper::FULL4WIRE, 8, 10, 9, 11);

int position = 1;

void setup() {
  pinMode(button1, INPUT_PULLUP);
  pinMode(button2, INPUT_PULLUP);
  pinMode(button3, INPUT_PULLUP);
  pinMode(button4, INPUT_PULLUP);
  irrecv.enableIRIn();
  stepper.setMaxSpeed(700);
  stepper.setAcceleration(200);
  Serial.begin(9600);
}

void moveToFloor(int targetFloor) {
  if (!isMoving && targetFloor != position) {
    isMoving = true;
    Serial.println(targetFloor);
    int stepTarget = (targetFloor - 1) * stepsPerFloor;
    stepper.moveTo(stepTarget);

    while (stepper.distanceToGo() != 0) {
      stepper.run();
    }

    position = targetFloor;
    isMoving = false;
  }
}

void loop() { 
  if (!isMoving) {  
    if(IrReceiver.decode()) {
      auto value= IrReceiver.decodedIRData.decodedRawData; 	
      switch(value) {
        case 4077715200:
          Serial.println("1");
          moveToFloor(1);
          break;
        case 3877175040: 
          Serial.println("2");   
          moveToFloor(2);
          break;
        case 2707357440: 
          Serial.println("3");   
          moveToFloor(3);
          break;
        case 4144561920: 
          Serial.println("4");
          moveToFloor(4);
          break;
        default: Serial.println(value);     
      }

    	 IrReceiver.resume();
    }
    if (digitalRead(button1) == LOW) moveToFloor(1);
    else if (digitalRead(button2) == LOW) moveToFloor(2);
    else if (digitalRead(button3) == LOW) moveToFloor(3);
    else if (digitalRead(button4) == LOW) moveToFloor(4);
  }
}